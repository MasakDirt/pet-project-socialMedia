package com.social.media.utils;

import com.social.media.exception.InvalidTextException;
import com.social.media.util.JwtUtils;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.params.ParameterizedTest;
import org.junit.jupiter.params.provider.MethodSource;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.context.SpringBootTest;

import java.util.stream.Stream;

import static org.assertj.core.api.AssertionsForClassTypes.*;
import static org.junit.jupiter.api.Assertions.*;

@SpringBootTest
public class JwtUtilsTests {
    private final JwtUtils jwtUtils;

    @Autowired
    public JwtUtilsTests(JwtUtils jwtUtils) {
        this.jwtUtils = jwtUtils;
    }

    @Test
    public void test_Injected_Components() {
        assertThat(jwtUtils).isNotNull();
    }

    @Test
    public void test_Valid_GenerateJwtTokenFromUsername() {
        String expected = "username";
        String token = jwtUtils.generateTokenFromUsername(expected);

        String actual = jwtUtils.getSubject(token);

        assertEquals(expected, actual,
                "In this test must be true because we have equals token generated from username " +
                        "and getting subject from right token.");
    }

    @ParameterizedTest
    @MethodSource("provideInvalidStrings")
    public void test_Invalid_GenerateJwtTokenFromUsername(String username) {
        assertThrows(InvalidTextException.class, () -> jwtUtils.generateTokenFromUsername(username),
                "");
    }

    @Test
    public void test_Valid_IsJwtTokenValid() {
        String token = jwtUtils.generateTokenFromUsername("token");

        assertTrue(jwtUtils.isJwtTokenValid(token),
                "In this method should be true because we pass valid jwtToken which is generated by jwtUtils class.");
    }

    @ParameterizedTest
    @MethodSource("provideInvalidStringsAndToken")
    public void test_Invalid_Exception_IsJwtTokenValid(String token) {
        assertThrows(InvalidTextException.class, () -> jwtUtils.isJwtTokenValid(token),
                "Here we should get InvalidTextException because my token cannot be with so small length and null and blank.");
    }

    @Test
    public void test_Valid_GetSubject() {
        String expected = "sub";

        String token = jwtUtils.generateTokenFromUsername(expected);
        String actual = jwtUtils.getSubject(token);

        assertEquals(expected, actual,
                "In testing get subject method we should get valid 'username' which is used for creating token.");
    }

    @ParameterizedTest
    @MethodSource("provideInvalidStringsAndToken")
    public void test_Invalid_GetSubject(String token) {
        assertThrows(InvalidTextException.class, () -> jwtUtils.getSubject(token),
                "Here we should get InvalidTextException because my token cannot be with so small length and null and blank.");
    }

    private static Stream<String> provideInvalidStringsAndToken() {
        return Stream.of("   ", null, "invalid");
    }

    private static Stream<String> provideInvalidStrings() {
        return Stream.of("   ", null);
    }
}
